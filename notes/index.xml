<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Theo Pomies</title>
<link>https://theopomies.com/notes/</link>
<atom:link href="https://theopomies.com/notes/index.xml" rel="self" type="application/rss+xml"/>
<description>All my notes. Read them at your own risk.</description>
<generator>quarto-1.7.34</generator>
<lastBuildDate>Fri, 29 Aug 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>Linear Algebra</title>
  <dc:creator>Theo POMIES</dc:creator>
  <link>https://theopomies.com/notes/linear-algebra.html</link>
  <description><![CDATA[ 




<section id="formulas" class="level2">
<h2 class="anchored" data-anchor-id="formulas">Formulas</h2>
<section id="dot-product" class="level3">
<h3 class="anchored" data-anchor-id="dot-product">Dot Product</h3>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cmathbf%7Bu%7D%20%5Ccdot%20%5Cmathbf%7Bv%7D%20=%20%5Csum_%7Bi%7D%20u_i%20v_i%20"></p>
<div id="661894c1" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">u, v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), torch.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># torch.tensor([0, 1, 2])</span></span>
<span id="cb1-2">torch.dot(u, v)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># u @ v</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>tensor(5)</code></pre>
</div>
</div>
</section>
<section id="matrix-vector-product" class="level3">
<h3 class="anchored" data-anchor-id="matrix-vector-product">Matrix-Vector Product</h3>
<p><img src="https://latex.codecogs.com/png.latex?%20(%5Cmathbf%7BA%7D%5Cmathbf%7Bu%7D)_%7Bi%7D%20=%20%5Cmathbf%7Ba%7D_%7Bi,:%7D%20%5Ccdot%20%5Cmathbf%7Bu%7D%20=%20%5Csum_%7Bj%7D%20a_%7Bi,j%7D%20u_j%20%20"></p>
<div id="ea3fddb6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">A, u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>).reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), torch.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-2">A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> u</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>tensor([1, 3, 5])</code></pre>
</div>
</div>
</section>
<section id="matrix-multiplication" class="level3">
<h3 class="anchored" data-anchor-id="matrix-multiplication">Matrix Multiplication</h3>
<p><img src="https://latex.codecogs.com/png.latex?%20(%5Cmathbf%7BA%7D%5Cmathbf%7BB%7D)_%7Bi,j%7D%20=%20%5Cmathbf%7Ba%7D_%7Bi,:%7D%20%5Ccdot%20%5Cmathbf%7Bb%7D_%7B:,%20j%7D%20=%20%5Csum_%7Bk%7D%20a_%7Bi,k%7D%20b_%7Bk,j%7D%20"></p>
<div id="18b7e90f" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">U, V <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>).reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>), torch.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>).reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span>
<span id="cb5-2">U <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> V</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>tensor([[ 3,  4,  5],
        [ 9, 14, 19],
        [15, 24, 33]])</code></pre>
</div>
</div>
</section>
<section id="inverse-of-a-square-matrix" class="level3">
<h3 class="anchored" data-anchor-id="inverse-of-a-square-matrix">Inverse of a Square Matrix</h3>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cmathbf%7BA%7D%5Cmathbf%7BA%7D%5E%7B-1%7D%20=%20%5Cmathbf%7BA%7D%5E%7B-1%7D%5Cmathbf%7BA%7D%20=%20%5Cmathbf%7BI%7D,%5Cquad%20%5Cmathbf%7BA%7D%20%5Cin%20%5Cmathbb%7BR%7D%5E%7Bn%20%5Ctimes%20n%7D%20"> Note: Might not exist if <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> is not invertible, that is <img src="https://latex.codecogs.com/png.latex?%5Cdet(%5Cmathbf%7BA%7D)%20=%200"></p>
<div id="df5fb4b6" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.randn(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.double)</span>
<span id="cb7-2">A_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> A.inverse()</span>
<span id="cb7-3">I <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.eye(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.double)</span>
<span id="cb7-4">torch.allclose(A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> A_i, I), torch.allclose(A_i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span> A, I)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>(True, True)</code></pre>
</div>
</div>
</section>
<section id="determinant-of-a-matrix" class="level3">
<h3 class="anchored" data-anchor-id="determinant-of-a-matrix">Determinant of a Matrix</h3>
<section id="basic-identities" class="level4">
<h4 class="anchored" data-anchor-id="basic-identities">Basic identities</h4>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cdet(%5Cmathbf%7BA%7D%5E%5Ctop)%20=%20%5Cdet(%5Cmathbf%7BA%7D)%20"> <img src="https://latex.codecogs.com/png.latex?%20%5Cdet(%5Cmathbf%7BA%7D%5Cmathbf%7BB%7D)%20=%20%5Cdet(%5Cmathbf%7BA%7D)%5Cdet(%5Cmathbf%7BB%7D)%20"></p>
</section>
<section id="determinant-of-diagonal-matrix" class="level4">
<h4 class="anchored" data-anchor-id="determinant-of-diagonal-matrix">Determinant of Diagonal Matrix</h4>
<p><img src="https://latex.codecogs.com/png.latex?%20A%20=%20%5Coperatorname%7Bdiag%7D(a_1,%20%5Cdots,%20a_n),%20%5Cquad%20%5Cdet(A)%20=%20%5Cprod_%7Bi=1%7D%5En%20a_i%20"></p>
<div id="e84ff561" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># using I as a mask</span></span>
<span id="cb9-2">I <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.eye(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float32)</span>
<span id="cb9-3">A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float32).reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> I  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A = diag(1, 5, 9)</span></span>
<span id="cb9-4">torch.det(A), torch.det(A) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> torch.diag(A).prod()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>(tensor(45.), tensor(True))</code></pre>
</div>
</div>
</section>
<section id="determinant-of-a-triangular-matrix" class="level4">
<h4 class="anchored" data-anchor-id="determinant-of-a-triangular-matrix">Determinant of a Triangular Matrix</h4>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cdet(T)%20=%20%5Cprod_%7Bi%7D%20t_%7Bii%7D,%20%5Cquad%20%5Ctext%7Bwhere%20$T$%20is%20triangular%7D%20"></p>
<div id="17246002" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">A <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.triu(torch.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>torch.float32).reshape(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb11-2">torch.det(A), torch.det(A) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> torch.diag(A).prod()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>(tensor(45.), tensor(True))</code></pre>
</div>
</div>
</section>
</section>
<section id="orthogonality" class="level3">
<h3 class="anchored" data-anchor-id="orthogonality">Orthogonality</h3>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cmathbf%7BA%7D%20%5C,%20%5Ctextnormal%7Bis%20orthogonal%7D%20%5Ciff%20%5Cmathbf%7BA%7D%5E%5Ctop%5Cmathbf%7BA%7D%20=%20%5Cmathbf%7BI%7D%5C:%20(=%20%5Cmathbf%7BA%7D%5Cmathbf%7BA%7D%5E%5Ctop)%20"></p>
<p>Interstingly,</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cmathbf%7BA%7D%20%5C,%20%5Ctextnormal%7Bis%20orthogonal%7D%20%5Ciff%20%5Cmathbf%7BA%7D%5E%7B-1%7D%20=%20%5Cmathbf%7BA%7D%5E%5Ctop%20"></p>
</section>
</section>
<section id="notes" class="level2">
<h2 class="anchored" data-anchor-id="notes">Notes</h2>
<section id="vectors" class="level3">
<h3 class="anchored" data-anchor-id="vectors">Vectors</h3>
<p>In linear algebra, vectors are column vectors by default, so <img src="https://latex.codecogs.com/png.latex?%20%5Cmathbf%7Bu%7D%20%5Cin%20%5Cmathbb%7BR%7D%5E%7Bn%20%5Ctimes%201%7D,%20%5Cquad%20%5Cmathbf%7Bu%7D%20=%20%5Cbegin%7Bbmatrix%7D%20u_1%20%5C%5C%20%5Cvdots%20%5C%5C%20u_n%20%5Cend%7Bbmatrix%7D%20"></p>
<p>It follows that when doing a Matrix-Vector product, the matrix is on the left <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D%5Cmathbf%7Bu%7D">.</p>
</section>
<section id="order-of-operations" class="level3">
<h3 class="anchored" data-anchor-id="order-of-operations">Order of operations</h3>
<p>Similarly, when we say “we apply a linear transformation <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> to <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BB%7D">”, we mean <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D%5Cmathbf%7BB%7D">.</p>
</section>
<section id="determinant" class="level3">
<h3 class="anchored" data-anchor-id="determinant">Determinant</h3>
<p>I think of the determinant of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> as the scaling factor of the linear transformation represented by <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D">.</p>
<p>This explains why a matrix whose determinant is 0 is not invertible: it “collapses”, and two images might have the same original input <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D"></p>
</section>
</section>
<section id="proofs" class="level2">
<h2 class="anchored" data-anchor-id="proofs">Proofs</h2>
<p>Later!</p>
</section>
<section id="algorithms" class="level2">
<h2 class="anchored" data-anchor-id="algorithms">Algorithms</h2>
<section id="gaussian-elimination" class="level3">
<h3 class="anchored" data-anchor-id="gaussian-elimination">Gaussian Elimination</h3>
<p>Gaussian elimination — or row reduction – is an algorithm for solving systems of linear equations, based on the following operations:</p>
<ul>
<li>Scaling a row</li>
<li>Swapping two rows</li>
<li>Adding a multiple of one row to another</li>
</ul>
</section>
<section id="lu-decomposition-or-lu-factorization" class="level3">
<h3 class="anchored" data-anchor-id="lu-decomposition-or-lu-factorization">LU decomposition (or LU factorization)</h3>
<p>Computing the determinant of a Matrix is not trivial at first glance.</p>
<p>But consider the following facts:</p>
<ul>
<li>we know how to easily compute the <a href="../notes/linear-algebra.html#determinant-of-a-triangular-matrix">determinant of a triangular matrix</a></li>
<li>we know how to easily compute the <a href="../notes/linear-algebra.html#basic-identities">determinant of a product of matrices</a></li>
</ul>
<p>Knowing that, we want to find a representation of our original matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> that involves an Upper Triangular Matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D">, and one or more other matrices whose determinant is known or trivial to compute, as <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BP%7D%5Cmathbf%7BA%7D%20=%20%5Cmathbf%7BL%7D%5Cmathbf%7BU%7D"></p>
<p>To go from <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BA%7D"> to <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D"> we’ll use <a href="../notes/linear-algebra.html#gaussian-elimination">Gaussian Elimination</a>, <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BP%7D"> tracks our permutations (row swaps) and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BL%7D"> tracks our row operations (row additions).</p>
<p>Now, because <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BP%7D"> is <a href="../notes/linear-algebra.html#orthogonality">orthogonal</a> (yes, since its the identity matrix with row swaps, when performing <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BP%7D%5E%5Ctop%5Cmathbf%7BP%7D">, the ones in the rows meet the ones in the columns at the diagonal, zeros everywhere else, so we get <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BP%7D%5E%5Ctop%5Cmathbf%7BP%7D%20=%20%5Cmathbf%7BI%7D">), we then have <img src="https://latex.codecogs.com/png.latex?%20%5Cmathbf%7BP%7D%5Cmathbf%7BA%7D%20=%20%5Cmathbf%7BL%7D%5Cmathbf%7BU%7D%20%5Cimplies%20%5Cmathbf%7BA%7D%20=%20%5Cmathbf%7BP%7D%5E%7B-1%7D%5Cmathbf%7BL%7D%5Cmathbf%7BU%7D%20=%20%5Cmathbf%7BP%7D%5E%5Ctop%5Cmathbf%7BL%7D%5Cmathbf%7BU%7D%20"></p>
<p>Finally, this means that <img src="https://latex.codecogs.com/png.latex?%20%5Cdet(%5Cmathbf%7BA%7D)%20=%20%5Cdet(%5Cmathbf%7BP%7D%5E%5Ctop)%20%5Ccdot%20%5Cdet(%5Cmathbf%7BL%7D)%20%5Ccdot%20%5Cdet(%5Cmathbf%7BU%7D)%20=%20%5Cdet(%5Cmathbf%7BP%7D)%20%5Ccdot%20%5Cdet(%5Cmathbf%7BL%7D)%20%5Ccdot%20%5Cdet(%5Cmathbf%7BU%7D)%20"></p>
<p>Now I’m not gonna prove that, but:</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?%5Cdet(%5Cmathbf%7BP%7D)%20=%20(-1)%5E%7B%5C#swaps%7D"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cdet(%5Cmathbf%7BL%7D)%20=%201"> (because when adding rows, we never modify the original identity’s diagonal, so the diagonal is full of ones, and since L is a Lower Triangular Matrix, the determinant is 1)</li>
</ul>
<p>Now, if we just keep track of row swaps, we can easily compute <img src="https://latex.codecogs.com/png.latex?%5Cdet(%5Cmathbf%7BA%7D)">!</p>
</section>
</section>
<section id="notation" class="level2">
<h2 class="anchored" data-anchor-id="notation">Notation</h2>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?x">: a scalar</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D">: a vector</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BX%7D">: a matrix</li>
<li><img src="https://latex.codecogs.com/png.latex?x_i">: the <img src="https://latex.codecogs.com/png.latex?i%5E%5Ctextrm%7Bth%7D"> element of vector <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D"></li>
<li><img src="https://latex.codecogs.com/png.latex?x_%7Bi,j%7D">: the element of matrix <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BX%7D"> at row <img src="https://latex.codecogs.com/png.latex?i"> and column <img src="https://latex.codecogs.com/png.latex?j"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D_%7Bi,%20:%7D">: the <img src="https://latex.codecogs.com/png.latex?i%5E%5Ctextrm%7Bth%7D"> row-vector of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BX%7D"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D_%7B:,j%7D">: the <img src="https://latex.codecogs.com/png.latex?j%5E%5Ctextrm%7Bth%7D"> column-vector of <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BX%7D"></li>
<li><img src="https://latex.codecogs.com/png.latex?%5Coperatorname%7Bdiag%7D(a_1,%20%5Cdots,%20a_n)">: a diagonal matrix</li>
<li><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BI%7D">: the indentity matrix</li>
</ul>


</section>

 ]]></description>
  <category>math</category>
  <guid>https://theopomies.com/notes/linear-algebra.html</guid>
  <pubDate>Fri, 29 Aug 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>On Typescript</title>
  <dc:creator>Theo POMIES</dc:creator>
  <link>https://theopomies.com/notes/typescript.html</link>
  <description><![CDATA[ 




<section id="first-principles" class="level2">
<h2 class="anchored" data-anchor-id="first-principles">First Principles</h2>
<ul>
<li>Let your types be flexible</li>
<li>Let your constraints be rigid</li>
</ul>
</section>
<section id="tldr-rules" class="level2">
<h2 class="anchored" data-anchor-id="tldr-rules">TL;DR Rules</h2>
<ul>
<li>Use <code>unknown</code> instead of <code>any</code>, then use type narrowing to get the correct type.</li>
<li>Use <code>type</code> over <code>interface</code>, unless you <em>actually</em> need to reach for an interface or need to express objects/class inheritance.</li>
<li>Avoid using <code>as</code> to <em>assert</em> types, most of the time you actually want to <strong>narrow</strong> the type with checks (if/else).</li>
<li>Use <code>array.at(index)</code> instead of <code>array[index]</code> unless array is a tuple (fixed size array).</li>
<li><strong>NEVER</strong> use TS specifics (<code>enum</code>, <code>private</code> in constructor, etc.).</li>
</ul>
</section>
<section id="recommandations" class="level2">
<h2 class="anchored" data-anchor-id="recommandations">Recommandations</h2>
<ul>
<li>Use <code>satisfies</code> to check if an object fits a type but not erase the type.</li>
<li>Use <code>as const</code> whenever possible. (Immutable data, enum-like objects, etc.)</li>
<li>Define (and export) types where they are consumed, and import them from other files if needed.</li>
</ul>
</section>
<section id="explanations" class="level2">
<h2 class="anchored" data-anchor-id="explanations">Explanations</h2>
<section id="narrowing-over-using-as" class="level3">
<h3 class="anchored" data-anchor-id="narrowing-over-using-as">Narrowing over using <code>as</code></h3>
<p>Suppose you have a function that takes a number</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode ts code-with-copy"><code class="sourceCode typescript"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">double</span>(a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">number</span>) {</span>
<span id="cb1-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb1-3">}</span></code></pre></div>
<p>And you have a variable that could be a number or a string</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode ts code-with-copy"><code class="sourceCode typescript"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">function</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getNumberOrString</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">number</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> {</span>
<span id="cb2-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">Math</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">random</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">?</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-3">}</span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> a<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">number</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">string</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">getNumberOrString</span>()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>Typescript will allow you to use <code>as</code> to <em>assert</em> the variable to a number (this is one of the ways that TypeScript is not sound)</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode ts code-with-copy"><code class="sourceCode typescript"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> result<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">number</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">double</span>(a <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">number</span>)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<p>But this not correct/sound at runtime!</p>
<p>The correct way to do this is to narrow the type with a check (if/else/early return).</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode ts code-with-copy"><code class="sourceCode typescript"><span id="cb4-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">typeof</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">===</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number"</span>) {</span>
<span id="cb4-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">const</span> result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">double</span>(a)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb4-3">}</span></code></pre></div>


</section>
</section>

 ]]></description>
  <category>typescript</category>
  <guid>https://theopomies.com/notes/typescript.html</guid>
  <pubDate>Fri, 14 Feb 2025 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
